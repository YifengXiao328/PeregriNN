from keras.models import load_model
import numpy as np
import pickle
import glob

# files = glob.glob('models/model*')
# files.sort()
# for f in enumerate(files):
#     network = load_model(f)
#     hidden_weights= network.layers[0].get_weights()
#     output_weights= network.layers[-1].get_weights()
#     with open('weights_100','wb') as fo:
#         pickle.dump([hidden_weights,output_weights],fo)
network = load_model('models/model_epoch_30.h5')
hidden_weights= network.layers[0].get_weights()
output_weights= network.layers[-1].get_weights()
W = hidden_weights[0].T
b = hidden_weights[1]
W_out = output_weights[0].T
b_out = output_weights[1]
relu = [0, 3, 4, 5, 6, 10, 11, 12, 13, 16]
assign = [0] * 20
for i in relu:
    assign[i] = 1

lidar = [0.09034029999999976, 0.011300518267002069, -0.011300518267002013, -0.09034029999999982, -0.42672571, -0.42650867579707874, 0.42650867579707735, 2.07327429, 0.09034029999999982, 0.09034029999999937, 0.09034029999999937, 0.09034029999999982, -0.42672571000000037, -3.4096597, -3.4096597, -2.0732742900000005]
net = (W.dot(lidar) + b) * assign
u = W_out.dot(net) + b_out

print(u)

# Solution found
# ('x', [3.5, 3.5, None, None])
# ('w', [3.5038143, 3.5045774, None, None])
# ('u', [0.0076285277, 0.0091548307])
# ('i', [0.0, 0.0, 0.0, 0.0, -3.5, -0.12508834, 0.12508834, 1.0, 0.0, 0.0, 0.0, 0.0, -3.5, -1.0, -1.0, -1.0])
# ('Relu', [9, 14, 16, 19, 21, 25, 27, 30, 33, 34, 36, 40, 42, 44, 45, 50, 53, 54, 56, 58, 62, 64, 70, 74, 76, 84, 88, 90, 91, 92, 95, 99, 101, 103, 105, 106, 108, 109, 112, 120, 121, 122, 125, 128, 130, 131, 132, 145, 149, 156, 174, 176, 178, 185, 190, 194, 207, 214, 215, 223, 230, 246, 253, 254, 255, 256, 258, 263, 266, 270, 274, 281, 284, 286, 290, 293, 294, 295, 297, 308, 313, 316, 318, 319, 323, 325, 326, 331, 333, 337, 340, 342, 345, 346, 351, 353, 354, 367, 369, 373, 374, 383, 392, 395, 398, 405, 415, 425, 426, 427, 429, 440, 442, 443, 445, 449, 451, 458, 459, 462, 464, 467, 469, 470, 474, 480, 483, 485, 486, 487, 489, 495, 496, 497, 499, 513, 514, 519, 520, 521, 525, 530, 537, 541, 546, 553, 554, 555, 556, 561, 562, 568, 569, 570, 574, 576, 581, 583, 584, 588, 589, 591, 593, 594, 595, 597, 598])
# ('time', 28.078927993774414)
