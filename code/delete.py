from keras.models import load_model
import numpy as np
import pickle

a = [1, 9, 10, 11, 19, 21, 22, 24, 25, 27, 28, 30, 33, 34, 36, 40, 44, 45, 50, 51, 53, 54, 56, 58, 60, 62, 64, 70, 74, 76, 84, 88, 90, 91, 92, 95, 97, 99, 101, 103, 105, 108, 109, 112, 117, 120, 121, 122, 125, 127, 128, 130, 131, 132, 138, 139, 143, 145, 147, 156, 174, 175, 176, 177, 178, 184, 185, 190, 194, 207, 213, 214, 215, 216, 217, 221, 224, 227, 230, 244, 246, 250, 253, 254, 255, 256, 258, 260, 263, 266, 267, 270, 274, 281, 283, 284, 286, 289, 290, 293, 294, 297, 298, 301, 302, 307, 308, 309, 310, 311, 313, 314, 316, 318, 319, 323, 325, 326, 327, 331, 333, 340, 342, 346, 351, 353, 354, 365, 369, 370, 373, 374, 380, 381, 383, 387, 392, 395, 398, 405, 408, 415, 420, 425, 426, 427, 429, 430, 440, 442, 443, 445, 448, 449, 450, 451, 456, 458, 459, 462, 463, 464, 467, 469, 470, 474, 480, 483, 485, 486, 487, 489, 492, 494, 495, 496, 497, 499, 503, 505, 508, 512, 513, 514, 516, 519, 520, 521, 537, 541, 546, 548, 550, 551, 553, 554, 555, 556, 561, 568, 569, 570, 574, 576, 581, 583, 584, 587, 588, 589, 591, 595, 597, 598]
b = [9, 11, 19, 21, 24, 25, 27, 28, 30, 33, 34, 36, 40, 44, 45, 50, 51, 53, 54, 56, 58, 62, 64, 70, 74, 76, 84, 88, 90, 91, 92, 95, 97, 99, 101, 103, 105, 108, 109, 112, 120, 121, 122, 127, 128, 130, 131, 132, 138, 145, 156, 174, 176, 178, 184, 185, 190, 194, 207, 214, 215, 221, 227, 230, 244, 246, 250, 253, 254, 255, 256, 258, 263, 266, 270, 274, 281, 284, 286, 293, 294, 297, 308, 313, 316, 318, 319, 323, 325, 326, 331, 333, 340, 342, 346, 353, 354, 365, 370, 373, 374, 381, 383, 392, 395, 398, 405, 415, 420, 426, 427, 429, 430, 440, 442, 443, 445, 449, 450, 451, 458, 459, 463, 464, 467, 469, 474, 480, 483, 485, 486, 487, 489, 492, 496, 497, 499, 505, 513, 514, 519, 520, 521, 537, 541, 548, 550, 553, 554, 555, 556, 561, 568, 569, 574, 581, 583, 584, 587, 588, 589, 591, 595, 597, 598]
c = [45, 117, 127, 177, 184, 221, 230, 260, 267, 283, 302, 415, 420, 450, 462, 469, 485, 495, 520, 546, 570, 587]
#preprocess
d = [9, 11, 19, 21, 25, 27, 30, 33, 34, 36, 40, 44, 50, 51, 53, 54, 56, 58, 62, 64, 70, 74, 76, 84, 88, 90, 91, 92, 95, 97, 99, 101, 103, 105, 108, 109, 112, 120, 121, 122, 128, 130, 131, 132, 138, 145, 156, 174, 176, 178, 185, 190, 194, 207, 214, 215, 246, 250, 253, 254, 255, 256, 258, 263, 266, 270, 274, 281, 284, 286, 293, 294, 297, 308, 313, 316, 318, 319, 323, 325, 326, 331, 333, 340, 342, 346, 353, 354, 370, 373, 374, 383, 392, 395, 398, 405, 426, 427, 429, 440, 442, 443, 445, 449, 451, 458, 459, 463, 464, 467, 474, 480, 483, 486, 487, 489, 492, 496, 497, 499, 505, 513, 514, 519, 521, 537, 541, 548, 550, 553, 554, 555, 556, 561, 568, 569, 574, 581, 583, 584, 588, 589, 591, 595, 597, 598]
e = [9, 11, 13, 22, 25, 31, 33, 36, 38, 51, 56, 59, 60, 62, 70, 81, 90, 93, 95, 97, 101, 105, 112, 116, 117, 122, 128, 137, 138, 145, 156, 194, 199, 207, 214, 215, 228, 229, 250, 255, 260, 263, 266, 274, 281, 285, 286, 289, 298, 305, 316, 318, 323, 326, 327, 328, 330, 331, 338, 340, 342, 364, 365, 370, 373, 375, 383, 385, 392, 395, 398, 401, 403, 408, 422, 426, 429, 437, 443, 450, 463, 467, 470, 475, 486, 487, 489, 494, 497, 501, 505, 513, 517, 521, 535, 541, 548, 550, 569, 574, 581, 586, 588, 591, 594]
f = [1, 9, 11, 13, 19, 22, 25, 28, 30, 31, 33, 34, 36, 38, 44, 50, 51, 56, 58, 59, 60, 62, 64, 70, 73, 74, 76, 81, 88, 90, 91, 93, 95, 97, 99, 101, 103, 105, 112, 116, 117, 120, 121, 122, 127, 128, 130, 131, 132, 137, 138, 145, 147, 156, 174, 176, 178, 184, 190, 194, 199, 207, 213, 214, 215, 216, 217, 221, 224, 228, 229, 238, 246, 250, 254, 255, 256, 260, 263, 266, 270, 272, 274, 281, 284, 285, 286, 289, 293, 294, 298, 301, 305, 308, 309, 311, 316, 318, 323, 326, 327, 328, 330, 331, 333, 338, 340, 342, 343, 345, 346, 353, 354, 358, 361, 363, 364, 365, 370, 373, 374, 375, 380, 383, 385, 387, 392, 395, 396, 398, 400, 401, 403, 405, 408, 420, 422, 426, 427, 429, 430, 437, 438, 440, 442, 443, 445, 449, 450, 451, 459, 462, 463, 464, 467, 470, 474, 475, 483, 484, 486, 487, 489, 494, 495, 497, 500, 501, 505, 508, 513, 516, 517, 519, 521, 535, 536, 539, 541, 542, 548, 550, 553, 555, 556, 561, 568, 569, 574, 581, 583, 584, 586, 587, 588, 589, 591, 594, 595, 597, 598]

g = [9, 11, 19, 21, 27, 30, 33, 34, 36, 40, 44, 45, 50, 53, 54, 56, 58, 62, 64, 70, 74, 76, 84, 88, 90, 91, 92, 95, 99, 101, 103, 105, 108, 109, 112, 120, 122, 128, 131, 132, 143, 145, 156, 174, 176, 177, 178, 185, 190, 194, 207, 214, 215, 230, 246, 253, 254, 255, 258, 263, 266, 270, 274, 281, 283, 284, 286, 293, 294, 297, 308, 313, 316, 318, 319, 323, 325, 326, 331, 333, 340, 342, 346, 353, 354, 373, 374, 381, 383, 395, 398, 405, 415, 426, 427, 429, 440, 442, 443, 445, 449, 451, 458, 459, 464, 467, 469, 474, 480, 483, 486, 487, 489, 492, 495, 496, 497, 499, 513, 514, 519, 520, 521, 537, 541, 546, 550, 553, 554, 555, 556, 561, 568, 569, 576, 581, 583, 584, 588, 589, 591, 595, 597, 598]
filename = 'counterexamples/Region_0'
with open(filename,'rb') as f:

    dict = pickle.load(f)
    counter_example, bool_model = dict['counter_example'], dict['bool_model']
    a = [idx for idx in counter_example if bool_model[idx] is False]
print(set(d)-set(g))
print(set(b)-set(a))
print(set(c)-set(a))
print(set(d)-set(a))
print(set(e) - set(f))
lidar = np.array([1.9592135, 0.24507476, -0.24507476, -0.89724598, -0.89724598, -0.19273443, 0.19273443, 1.5407865, 1.9592135, 1.9592135, 1.9592135, 0.89724598, -0.89724598, -1.5407865, -1.5407865, -1.5407865])
network = load_model('my_model.h5')

hidden_weights= network.layers[0].get_weights()
output_weights= network.layers[-1].get_weights()
W = hidden_weights[0].T
b = hidden_weights[1]
W_out = output_weights[0].T
b_out = output_weights[1]
relu = [9, 10, 11, 16, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 35, 36, 38, 40, 42, 44, 45, 48, 50, 51, 53, 54, 56, 58, 59, 62, 64, 70, 74, 76, 80, 81, 84, 88, 90, 91, 92, 95, 97, 99, 101, 103, 105, 108, 109, 112, 117, 120, 121, 122, 125, 127, 128, 130, 131, 132, 138, 143, 145, 156, 174, 175, 176, 177, 178, 184, 185, 190, 194, 203, 207, 213, 214, 215, 216, 221, 223, 227, 228, 230, 244, 246, 250, 253, 254, 255, 256, 258, 260, 263, 266, 267, 269, 270, 274, 281, 283, 284, 286, 289, 290, 293, 294, 297, 302, 308, 309, 311, 313, 316, 318, 319, 323, 325, 326, 331, 333, 340, 342, 346, 353, 354, 361, 364, 365, 369, 370, 373, 374, 375, 380, 381, 383, 385, 392, 395, 398, 401, 403, 405, 408, 415, 420, 422, 426, 427, 429, 430, 437, 440, 442, 443, 445, 448, 449, 450, 451, 458, 459, 462, 463, 464, 467, 469, 470, 474, 480, 483, 485, 486, 487, 489, 492, 495, 496, 497, 499, 503, 505, 511, 513, 514, 519, 520, 521, 535, 536, 537, 541, 545, 546, 548, 550, 551, 553, 554, 555, 556, 561, 568, 569, 570, 574, 576, 580, 581, 583, 584, 587, 588, 589, 591, 595, 596, 597, 598]
assign = [0] * 600
for i in relu:
    assign[i] = 1

lidar =[0.89809496, 0.11234121, -0.11234121, -0.39809496, -0.39809496, -0.32546798, 0.32546798, 2.101905, 0.89809496, 0.89809496, 0.89809496, 0.39809496, -0.39809496, -2.601905, -2.601905, -2.101905]
net = (W.dot(lidar) + b) * assign
u = W_out.dot(net) + b_out

print(u)

